
Lab7-Buffers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00000c76  00000d0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001d8  008001d8  00000de2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d34  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084c  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005da  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049f  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c0  00000000  00000000  0000305f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000351f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3d       	cpi	r26, 0xD8	; 216
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 ed       	ldi	r26, 0xD8	; 216
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3d       	cpi	r26, 0xDC	; 220
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  9e:	0c 94 39 06 	jmp	0xc72	; 0xc72 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
//
// Call it at any time to change the USART communication parameters.
//
// Returns zero in case of success, non-zero for errors.
uint8_t USART_Init(struct USART_configuration config)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <USART_Init+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <USART_Init+0x8>
  ae:	1f 92       	push	r1
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	49 83       	std	Y+1, r20	; 0x01
  b6:	5a 83       	std	Y+2, r21	; 0x02
  b8:	6b 83       	std	Y+3, r22	; 0x03
  ba:	7c 83       	std	Y+4, r23	; 0x04
  bc:	8d 83       	std	Y+5, r24	; 0x05
	// Add your code here. Don't forget that this function is supposed
	// to return an error code if something goes wrong!
	/*Set baud rate */
	uint16_t ubrr = FOSC/config.baud/16 - 1;
  be:	29 81       	ldd	r18, Y+1	; 0x01
  c0:	3a 81       	ldd	r19, Y+2	; 0x02
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	60 e4       	ldi	r22, 0x40	; 64
  c8:	72 e4       	ldi	r23, 0x42	; 66
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 ed 01 	call	0x3da	; 0x3da <__divmodsi4>
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
	
	UBRR0H = (unsigned char)(ubrr>>8);
  d6:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
  da:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	//Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
  de:	88 e9       	ldi	r24, 0x98	; 152
  e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	switch (config.n_data)
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	86 30       	cpi	r24, 0x06	; 6
  e8:	79 f0       	breq	.+30     	; 0x108 <USART_Init+0x62>
  ea:	18 f4       	brcc	.+6      	; 0xf2 <USART_Init+0x4c>
  ec:	85 30       	cpi	r24, 0x05	; 5
  ee:	31 f0       	breq	.+12     	; 0xfc <USART_Init+0x56>
  f0:	23 c0       	rjmp	.+70     	; 0x138 <USART_Init+0x92>
  f2:	87 30       	cpi	r24, 0x07	; 7
  f4:	91 f0       	breq	.+36     	; 0x11a <USART_Init+0x74>
  f6:	88 30       	cpi	r24, 0x08	; 8
  f8:	c9 f0       	breq	.+50     	; 0x12c <USART_Init+0x86>
  fa:	1e c0       	rjmp	.+60     	; 0x138 <USART_Init+0x92>
	{
		case 5: UCSR0C &= ~(1<<UCSZ02) & ~(1<<UCSZ01) & ~(1<<UCSZ00);
  fc:	e2 ec       	ldi	r30, 0xC2	; 194
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	89 7f       	andi	r24, 0xF9	; 249
 104:	80 83       	st	Z, r24
		break;
 106:	1d c0       	rjmp	.+58     	; 0x142 <USART_Init+0x9c>
		case 6: UCSR0C &= ~(1<<UCSZ02) & ~(1<<UCSZ01);
 108:	e2 ec       	ldi	r30, 0xC2	; 194
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8b 7f       	andi	r24, 0xFB	; 251
 110:	80 83       	st	Z, r24
		UCSR0C |=  (1<<UCSZ00);
 112:	80 81       	ld	r24, Z
 114:	82 60       	ori	r24, 0x02	; 2
 116:	80 83       	st	Z, r24
		break;
 118:	14 c0       	rjmp	.+40     	; 0x142 <USART_Init+0x9c>
		case 7: UCSR0C &= ~(1<<UCSZ02);
 11a:	e2 ec       	ldi	r30, 0xC2	; 194
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	80 83       	st	Z, r24
		UCSR0C |=  (1<<UCSZ01) | (1<<UCSZ00);
 124:	80 81       	ld	r24, Z
 126:	86 60       	ori	r24, 0x06	; 6
 128:	80 83       	st	Z, r24
		break;
 12a:	0b c0       	rjmp	.+22     	; 0x142 <USART_Init+0x9c>
		case 8: UCSR0C |= (3<<UCSZ00);
 12c:	e2 ec       	ldi	r30, 0xC2	; 194
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	86 60       	ori	r24, 0x06	; 6
 134:	80 83       	st	Z, r24
		break;
 136:	05 c0       	rjmp	.+10     	; 0x142 <USART_Init+0x9c>
		default: UCSR0C |= (3<<UCSZ00);
 138:	e2 ec       	ldi	r30, 0xC2	; 194
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	86 60       	ori	r24, 0x06	; 6
 140:	80 83       	st	Z, r24
	}
	
	switch (config.n_stop)
 142:	8d 81       	ldd	r24, Y+5	; 0x05
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	19 f0       	breq	.+6      	; 0x14e <USART_Init+0xa8>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	39 f0       	breq	.+14     	; 0x15a <USART_Init+0xb4>
 14c:	0c c0       	rjmp	.+24     	; 0x166 <USART_Init+0xc0>
	{
		case 1: UCSR0C &= ~(1<<USBS0);
 14e:	e2 ec       	ldi	r30, 0xC2	; 194
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	87 7f       	andi	r24, 0xF7	; 247
 156:	80 83       	st	Z, r24
		break;
 158:	0b c0       	rjmp	.+22     	; 0x170 <USART_Init+0xca>
		case 2: UCSR0C |= (1<<USBS0);
 15a:	e2 ec       	ldi	r30, 0xC2	; 194
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	88 60       	ori	r24, 0x08	; 8
 162:	80 83       	st	Z, r24
		break;
 164:	05 c0       	rjmp	.+10     	; 0x170 <USART_Init+0xca>
		default: UCSR0C &= ~(1<<USBS0);
 166:	e2 ec       	ldi	r30, 0xC2	; 194
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	87 7f       	andi	r24, 0xF7	; 247
 16e:	80 83       	st	Z, r24
	}
	
	switch (config.parity)
 170:	8c 81       	ldd	r24, Y+4	; 0x04
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	81 f0       	breq	.+32     	; 0x196 <USART_Init+0xf0>
 176:	18 f0       	brcs	.+6      	; 0x17e <USART_Init+0xd8>
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	39 f0       	breq	.+14     	; 0x18a <USART_Init+0xe4>
 17c:	15 c0       	rjmp	.+42     	; 0x1a8 <USART_Init+0x102>
	{
		case 0: UCSR0C &= ~(1<<UPM01) & ~(1<<UPM00);	// None parity
 17e:	e2 ec       	ldi	r30, 0xC2	; 194
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	8f 7c       	andi	r24, 0xCF	; 207
 186:	80 83       	st	Z, r24
		break;
 188:	14 c0       	rjmp	.+40     	; 0x1b2 <USART_Init+0x10c>
		case 2: UCSR0C |= (1<<UPM01) | (1<<UPM00);		// Odd parity
 18a:	e2 ec       	ldi	r30, 0xC2	; 194
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 63       	ori	r24, 0x30	; 48
 192:	80 83       	st	Z, r24
		break;
 194:	0e c0       	rjmp	.+28     	; 0x1b2 <USART_Init+0x10c>
		case 1: UCSR0C |= (1<<UPM01);					// Even parity
 196:	e2 ec       	ldi	r30, 0xC2	; 194
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 62       	ori	r24, 0x20	; 32
 19e:	80 83       	st	Z, r24
		UCSR0C &= ~(1<<UPM00);
 1a0:	80 81       	ld	r24, Z
 1a2:	8f 7e       	andi	r24, 0xEF	; 239
 1a4:	80 83       	st	Z, r24
		break;
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <USART_Init+0x10c>
		default: UCSR0C &= ~(1<<USBS0);
 1a8:	e2 ec       	ldi	r30, 0xC2	; 194
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	87 7f       	andi	r24, 0xF7	; 247
 1b0:	80 83       	st	Z, r24
	}
	return 0;
}
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <USART_Transmit_char>:

// Transmits a single character
void USART_Transmit_char(uint8_t data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 1c4:	e0 ec       	ldi	r30, 0xC0	; 192
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	90 81       	ld	r25, Z
 1ca:	95 ff       	sbrs	r25, 5
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <USART_Transmit_char+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1d2:	08 95       	ret

000001d4 <USART_Transmit_String>:
}

// Transmits a given string
void USART_Transmit_String(char* string)
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
	while (*string != '\0')
 1da:	88 81       	ld	r24, Y
 1dc:	88 23       	and	r24, r24
 1de:	31 f0       	breq	.+12     	; 0x1ec <USART_Transmit_String+0x18>
 1e0:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_Transmit_char(*string);
 1e2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit_char>
}

// Transmits a given string
void USART_Transmit_String(char* string)
{
	while (*string != '\0')
 1e6:	89 91       	ld	r24, Y+
 1e8:	81 11       	cpse	r24, r1
 1ea:	fb cf       	rjmp	.-10     	; 0x1e2 <USART_Transmit_String+0xe>
	{
		USART_Transmit_char(*string);
		string++;
	}
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <USART_Receive_char>:

// Receives a single character
char USART_Receive_char(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
 1f2:	e0 ec       	ldi	r30, 0xC0	; 192
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	88 23       	and	r24, r24
 1fa:	ec f7       	brge	.-6      	; 0x1f6 <USART_Receive_char+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 1fc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 200:	08 95       	ret

00000202 <linked_list_init>:
}
	
node_t *linked_list_init() 
{
	node_t *head = NULL;
	head = malloc(sizeof(node_t));
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 2e 02 	call	0x45c	; 0x45c <malloc>
	head->val = ' ';
 20a:	20 e2       	ldi	r18, 0x20	; 32
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
	head->next = NULL;
 210:	12 82       	std	Z+2, r1	; 0x02
 212:	11 82       	std	Z+1, r1	; 0x01
	return head;
}
 214:	08 95       	ret

00000216 <append>:

void append(node_t *p_head, uint8_t value)
{
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
 21e:	16 2f       	mov	r17, r22
	node_t *current = p_head;
	while (current->next != NULL)
 220:	01 c0       	rjmp	.+2      	; 0x224 <append+0xe>
	{
		current = current->next;
 222:	ec 01       	movw	r28, r24
}

void append(node_t *p_head, uint8_t value)
{
	node_t *current = p_head;
	while (current->next != NULL)
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	9a 81       	ldd	r25, Y+2	; 0x02
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	d9 f7       	brne	.-10     	; 0x222 <append+0xc>
	{
		current = current->next;
	}
	current->next = malloc(sizeof(node_t));
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 2e 02 	call	0x45c	; 0x45c <malloc>
 234:	9a 83       	std	Y+2, r25	; 0x02
 236:	89 83       	std	Y+1, r24	; 0x01
	current->next->val = value;
 238:	fc 01       	movw	r30, r24
 23a:	10 83       	st	Z, r17
	current->next->next = NULL;
 23c:	e9 81       	ldd	r30, Y+1	; 0x01
 23e:	fa 81       	ldd	r31, Y+2	; 0x02
 240:	12 82       	std	Z+2, r1	; 0x02
 242:	11 82       	std	Z+1, r1	; 0x01
}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	08 95       	ret

0000024c <USART_Receive_String>:

// Receives a '\n' terminated string and writes it into a supplied buffer.
// The buffer must be guaranteed to handle at least bufflen bytes.
// Returns the number of bytes written into the buffer.
uint8_t USART_Receive_String(node_t *p_head)
{
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	8c 01       	movw	r16, r24
	char c = USART_Receive_char();
 256:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <USART_Receive_char>
	int contador = 0;
	while (c != '\n')
 25a:	8a 30       	cpi	r24, 0x0A	; 10
 25c:	61 f0       	breq	.+24     	; 0x276 <USART_Receive_String+0x2a>
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	d0 e0       	ldi	r29, 0x00	; 0
	{
		append(p_head, c);
 262:	68 2f       	mov	r22, r24
 264:	c8 01       	movw	r24, r16
 266:	0e 94 0b 01 	call	0x216	; 0x216 <append>
		c = USART_Receive_char();
 26a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <USART_Receive_char>
		contador++;
 26e:	21 96       	adiw	r28, 0x01	; 1
// Returns the number of bytes written into the buffer.
uint8_t USART_Receive_String(node_t *p_head)
{
	char c = USART_Receive_char();
	int contador = 0;
	while (c != '\n')
 270:	8a 30       	cpi	r24, 0x0A	; 10
 272:	b9 f7       	brne	.-18     	; 0x262 <USART_Receive_String+0x16>
 274:	02 c0       	rjmp	.+4      	; 0x27a <USART_Receive_String+0x2e>
// The buffer must be guaranteed to handle at least bufflen bytes.
// Returns the number of bytes written into the buffer.
uint8_t USART_Receive_String(node_t *p_head)
{
	char c = USART_Receive_char();
	int contador = 0;
 276:	c0 e0       	ldi	r28, 0x00	; 0
 278:	d0 e0       	ldi	r29, 0x00	; 0
		append(p_head, c);
		c = USART_Receive_char();
		contador++;
	}
	return contador;
}
 27a:	8c 2f       	mov	r24, r28
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	08 95       	ret

00000286 <push>:
	current->next->val = value;
	current->next->next = NULL;
}

void push(node_t ** head, uint8_t value) 
{
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	ec 01       	movw	r28, r24
 28e:	16 2f       	mov	r17, r22
	node_t * new_node;
	new_node = malloc(sizeof(node_t));
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 2e 02 	call	0x45c	; 0x45c <malloc>

	new_node->val = value;
 298:	fc 01       	movw	r30, r24
 29a:	10 83       	st	Z, r17
	new_node->next = *head;
 29c:	28 81       	ld	r18, Y
 29e:	39 81       	ldd	r19, Y+1	; 0x01
 2a0:	32 83       	std	Z+2, r19	; 0x02
 2a2:	21 83       	std	Z+1, r18	; 0x01
	*head = new_node;
 2a4:	99 83       	std	Y+1, r25	; 0x01
 2a6:	88 83       	st	Y, r24
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	08 95       	ret

000002b0 <clear_list>:

void clear_list(node_t *p_head)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	00 d0       	rcall	.+0      	; 0x2b6 <clear_list+0x6>
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	9a 83       	std	Y+2, r25	; 0x02
 2bc:	89 83       	std	Y+1, r24	; 0x01
	node_t *node = p_head;
	while(node != NULL )
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	61 f0       	breq	.+24     	; 0x2da <clear_list+0x2a>
	{
		p_head = p_head->next;
 2c2:	e9 81       	ldd	r30, Y+1	; 0x01
 2c4:	fa 81       	ldd	r31, Y+2	; 0x02
 2c6:	21 81       	ldd	r18, Z+1	; 0x01
 2c8:	32 81       	ldd	r19, Z+2	; 0x02
 2ca:	3a 83       	std	Y+2, r19	; 0x02
 2cc:	29 83       	std	Y+1, r18	; 0x01
		free(node);
 2ce:	0e 94 c6 02 	call	0x58c	; 0x58c <free>
		node = p_head;
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	9a 81       	ldd	r25, Y+2	; 0x02
}

void clear_list(node_t *p_head)
{
	node_t *node = p_head;
	while(node != NULL )
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	a1 f7       	brne	.-24     	; 0x2c2 <clear_list+0x12>
	{
		p_head = p_head->next;
		free(node);
		node = p_head;
	}
	push(&p_head, ' ');
 2da:	60 e2       	ldi	r22, 0x20	; 32
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	0e 94 43 01 	call	0x286	; 0x286 <push>
}
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <print_list>:

void print_list(node_t * p_head) {
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	8c 01       	movw	r16, r24
	node_t * current = p_head;

	while (current != NULL)
 2f8:	00 97       	sbiw	r24, 0x00	; 0
 2fa:	49 f0       	breq	.+18     	; 0x30e <print_list+0x20>
 2fc:	ec 01       	movw	r28, r24
	{
		USART_Transmit_char(current->val);
 2fe:	88 81       	ld	r24, Y
 300:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit_char>
		current = current->next;
 304:	09 80       	ldd	r0, Y+1	; 0x01
 306:	da 81       	ldd	r29, Y+2	; 0x02
 308:	c0 2d       	mov	r28, r0
}

void print_list(node_t * p_head) {
	node_t * current = p_head;

	while (current != NULL)
 30a:	20 97       	sbiw	r28, 0x00	; 0
 30c:	c1 f7       	brne	.-16     	; 0x2fe <print_list+0x10>
	{
		USART_Transmit_char(current->val);
		current = current->next;
	}
	clear_list(p_head);
 30e:	c8 01       	movw	r24, r16
 310:	0e 94 58 01 	call	0x2b0	; 0x2b0 <clear_list>
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	08 95       	ret

0000031e <main>:

#include <avr/io.h>
#include "Buffers_Info.h"

int main(void)
{
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	00 d0       	rcall	.+0      	; 0x324 <main+0x6>
 324:	00 d0       	rcall	.+0      	; 0x326 <main+0x8>
 326:	00 d0       	rcall	.+0      	; 0x328 <main+0xa>
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
	// Initialize the serial communication interface
	struct USART_configuration config_57600_8N1 = {57600, 8, 0, 1};
 32c:	85 e0       	ldi	r24, 0x05	; 5
 32e:	e6 e0       	ldi	r30, 0x06	; 6
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	de 01       	movw	r26, r28
 334:	11 96       	adiw	r26, 0x01	; 1
 336:	01 90       	ld	r0, Z+
 338:	0d 92       	st	X+, r0
 33a:	8a 95       	dec	r24
 33c:	e1 f7       	brne	.-8      	; 0x336 <main+0x18>
	USART_Init(config_57600_8N1);
 33e:	49 81       	ldd	r20, Y+1	; 0x01
 340:	5a 81       	ldd	r21, Y+2	; 0x02
 342:	6b 81       	ldd	r22, Y+3	; 0x03
 344:	7c 81       	ldd	r23, Y+4	; 0x04
 346:	8d 81       	ldd	r24, Y+5	; 0x05
 348:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	node_t *head = linked_list_init();
 34c:	0e 94 01 01 	call	0x202	; 0x202 <linked_list_init>
 350:	6c 01       	movw	r12, r24
		// Print a welcome message
		USART_Transmit_String("Welcome to the Second test. Please send a properly terminated string.\r\n\r\n");
		
		int i = USART_Receive_String(head);
		char len[] = "";
		sprintf(len, "%d", i); 
 352:	0f 2e       	mov	r0, r31
 354:	f4 eb       	ldi	r31, 0xB4	; 180
 356:	ef 2e       	mov	r14, r31
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	ff 2e       	mov	r15, r31
 35c:	f0 2d       	mov	r31, r0
 35e:	8e 01       	movw	r16, r28
 360:	0a 5f       	subi	r16, 0xFA	; 250
 362:	1f 4f       	sbci	r17, 0xFF	; 255
	node_t *head = linked_list_init();

	while(1)
	{
		// Print a welcome message
		USART_Transmit_String("Welcome to the first test. Please send a single character from your terminal.\r\n");
 364:	8b e0       	ldi	r24, 0x0B	; 11
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART_Transmit_String>
		
		// Show the received character
		char c = USART_Receive_char();
 36c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <USART_Receive_char>
 370:	b8 2e       	mov	r11, r24
		USART_Transmit_String("I received an ");
 372:	8b e5       	ldi	r24, 0x5B	; 91
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART_Transmit_String>
		USART_Transmit_char(c);
 37a:	8b 2d       	mov	r24, r11
 37c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit_char>
		USART_Transmit_String(".\r\n\r\n");
 380:	8e ea       	ldi	r24, 0xAE	; 174
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART_Transmit_String>
		
		
		// Print a welcome message
		USART_Transmit_String("Welcome to the Second test. Please send a properly terminated string.\r\n\r\n");
 388:	8a e6       	ldi	r24, 0x6A	; 106
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART_Transmit_String>
		
		int i = USART_Receive_String(head);
 390:	c6 01       	movw	r24, r12
 392:	0e 94 26 01 	call	0x24c	; 0x24c <USART_Receive_String>
		char len[] = "";
 396:	1e 82       	std	Y+6, r1	; 0x06
		sprintf(len, "%d", i); 
 398:	1f 92       	push	r1
 39a:	8f 93       	push	r24
 39c:	ff 92       	push	r15
 39e:	ef 92       	push	r14
 3a0:	1f 93       	push	r17
 3a2:	0f 93       	push	r16
 3a4:	0e 94 4f 03 	call	0x69e	; 0x69e <sprintf>
		USART_Transmit_String("I received this line:");
 3a8:	87 eb       	ldi	r24, 0xB7	; 183
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART_Transmit_String>
		// Show the received string
		print_list(head);
 3b0:	c6 01       	movw	r24, r12
 3b2:	0e 94 77 01 	call	0x2ee	; 0x2ee <print_list>
		USART_Transmit_String("  Largo: ");
 3b6:	8d ec       	ldi	r24, 0xCD	; 205
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART_Transmit_String>
		USART_Transmit_String(len);
 3be:	c8 01       	movw	r24, r16
 3c0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART_Transmit_String>
		USART_Transmit_String(".\r\n\r\n");
 3c4:	8e ea       	ldi	r24, 0xAE	; 174
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART_Transmit_String>
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	c5 cf       	rjmp	.-118    	; 0x364 <main+0x46>

000003da <__divmodsi4>:
 3da:	05 2e       	mov	r0, r21
 3dc:	97 fb       	bst	r25, 7
 3de:	1e f4       	brtc	.+6      	; 0x3e6 <__divmodsi4+0xc>
 3e0:	00 94       	com	r0
 3e2:	0e 94 04 02 	call	0x408	; 0x408 <__negsi2>
 3e6:	57 fd       	sbrc	r21, 7
 3e8:	07 d0       	rcall	.+14     	; 0x3f8 <__divmodsi4_neg2>
 3ea:	0e 94 0c 02 	call	0x418	; 0x418 <__udivmodsi4>
 3ee:	07 fc       	sbrc	r0, 7
 3f0:	03 d0       	rcall	.+6      	; 0x3f8 <__divmodsi4_neg2>
 3f2:	4e f4       	brtc	.+18     	; 0x406 <__divmodsi4_exit>
 3f4:	0c 94 04 02 	jmp	0x408	; 0x408 <__negsi2>

000003f8 <__divmodsi4_neg2>:
 3f8:	50 95       	com	r21
 3fa:	40 95       	com	r20
 3fc:	30 95       	com	r19
 3fe:	21 95       	neg	r18
 400:	3f 4f       	sbci	r19, 0xFF	; 255
 402:	4f 4f       	sbci	r20, 0xFF	; 255
 404:	5f 4f       	sbci	r21, 0xFF	; 255

00000406 <__divmodsi4_exit>:
 406:	08 95       	ret

00000408 <__negsi2>:
 408:	90 95       	com	r25
 40a:	80 95       	com	r24
 40c:	70 95       	com	r23
 40e:	61 95       	neg	r22
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	8f 4f       	sbci	r24, 0xFF	; 255
 414:	9f 4f       	sbci	r25, 0xFF	; 255
 416:	08 95       	ret

00000418 <__udivmodsi4>:
 418:	a1 e2       	ldi	r26, 0x21	; 33
 41a:	1a 2e       	mov	r1, r26
 41c:	aa 1b       	sub	r26, r26
 41e:	bb 1b       	sub	r27, r27
 420:	fd 01       	movw	r30, r26
 422:	0d c0       	rjmp	.+26     	; 0x43e <__udivmodsi4_ep>

00000424 <__udivmodsi4_loop>:
 424:	aa 1f       	adc	r26, r26
 426:	bb 1f       	adc	r27, r27
 428:	ee 1f       	adc	r30, r30
 42a:	ff 1f       	adc	r31, r31
 42c:	a2 17       	cp	r26, r18
 42e:	b3 07       	cpc	r27, r19
 430:	e4 07       	cpc	r30, r20
 432:	f5 07       	cpc	r31, r21
 434:	20 f0       	brcs	.+8      	; 0x43e <__udivmodsi4_ep>
 436:	a2 1b       	sub	r26, r18
 438:	b3 0b       	sbc	r27, r19
 43a:	e4 0b       	sbc	r30, r20
 43c:	f5 0b       	sbc	r31, r21

0000043e <__udivmodsi4_ep>:
 43e:	66 1f       	adc	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	88 1f       	adc	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	1a 94       	dec	r1
 448:	69 f7       	brne	.-38     	; 0x424 <__udivmodsi4_loop>
 44a:	60 95       	com	r22
 44c:	70 95       	com	r23
 44e:	80 95       	com	r24
 450:	90 95       	com	r25
 452:	9b 01       	movw	r18, r22
 454:	ac 01       	movw	r20, r24
 456:	bd 01       	movw	r22, r26
 458:	cf 01       	movw	r24, r30
 45a:	08 95       	ret

0000045c <malloc>:
 45c:	0f 93       	push	r16
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	91 05       	cpc	r25, r1
 468:	10 f4       	brcc	.+4      	; 0x46e <malloc+0x12>
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <__flp>
 472:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <__flp+0x1>
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	a0 e0       	ldi	r26, 0x00	; 0
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	30 97       	sbiw	r30, 0x00	; 0
 480:	19 f1       	breq	.+70     	; 0x4c8 <malloc+0x6c>
 482:	40 81       	ld	r20, Z
 484:	51 81       	ldd	r21, Z+1	; 0x01
 486:	02 81       	ldd	r16, Z+2	; 0x02
 488:	13 81       	ldd	r17, Z+3	; 0x03
 48a:	48 17       	cp	r20, r24
 48c:	59 07       	cpc	r21, r25
 48e:	c8 f0       	brcs	.+50     	; 0x4c2 <malloc+0x66>
 490:	84 17       	cp	r24, r20
 492:	95 07       	cpc	r25, r21
 494:	69 f4       	brne	.+26     	; 0x4b0 <malloc+0x54>
 496:	10 97       	sbiw	r26, 0x00	; 0
 498:	31 f0       	breq	.+12     	; 0x4a6 <malloc+0x4a>
 49a:	12 96       	adiw	r26, 0x02	; 2
 49c:	0c 93       	st	X, r16
 49e:	12 97       	sbiw	r26, 0x02	; 2
 4a0:	13 96       	adiw	r26, 0x03	; 3
 4a2:	1c 93       	st	X, r17
 4a4:	27 c0       	rjmp	.+78     	; 0x4f4 <malloc+0x98>
 4a6:	00 93 da 01 	sts	0x01DA, r16	; 0x8001da <__flp>
 4aa:	10 93 db 01 	sts	0x01DB, r17	; 0x8001db <__flp+0x1>
 4ae:	22 c0       	rjmp	.+68     	; 0x4f4 <malloc+0x98>
 4b0:	21 15       	cp	r18, r1
 4b2:	31 05       	cpc	r19, r1
 4b4:	19 f0       	breq	.+6      	; 0x4bc <malloc+0x60>
 4b6:	42 17       	cp	r20, r18
 4b8:	53 07       	cpc	r21, r19
 4ba:	18 f4       	brcc	.+6      	; 0x4c2 <malloc+0x66>
 4bc:	9a 01       	movw	r18, r20
 4be:	bd 01       	movw	r22, r26
 4c0:	ef 01       	movw	r28, r30
 4c2:	df 01       	movw	r26, r30
 4c4:	f8 01       	movw	r30, r16
 4c6:	db cf       	rjmp	.-74     	; 0x47e <malloc+0x22>
 4c8:	21 15       	cp	r18, r1
 4ca:	31 05       	cpc	r19, r1
 4cc:	f9 f0       	breq	.+62     	; 0x50c <malloc+0xb0>
 4ce:	28 1b       	sub	r18, r24
 4d0:	39 0b       	sbc	r19, r25
 4d2:	24 30       	cpi	r18, 0x04	; 4
 4d4:	31 05       	cpc	r19, r1
 4d6:	80 f4       	brcc	.+32     	; 0x4f8 <malloc+0x9c>
 4d8:	8a 81       	ldd	r24, Y+2	; 0x02
 4da:	9b 81       	ldd	r25, Y+3	; 0x03
 4dc:	61 15       	cp	r22, r1
 4de:	71 05       	cpc	r23, r1
 4e0:	21 f0       	breq	.+8      	; 0x4ea <malloc+0x8e>
 4e2:	fb 01       	movw	r30, r22
 4e4:	93 83       	std	Z+3, r25	; 0x03
 4e6:	82 83       	std	Z+2, r24	; 0x02
 4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <malloc+0x96>
 4ea:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <__flp+0x1>
 4ee:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__flp>
 4f2:	fe 01       	movw	r30, r28
 4f4:	32 96       	adiw	r30, 0x02	; 2
 4f6:	44 c0       	rjmp	.+136    	; 0x580 <malloc+0x124>
 4f8:	fe 01       	movw	r30, r28
 4fa:	e2 0f       	add	r30, r18
 4fc:	f3 1f       	adc	r31, r19
 4fe:	81 93       	st	Z+, r24
 500:	91 93       	st	Z+, r25
 502:	22 50       	subi	r18, 0x02	; 2
 504:	31 09       	sbc	r19, r1
 506:	39 83       	std	Y+1, r19	; 0x01
 508:	28 83       	st	Y, r18
 50a:	3a c0       	rjmp	.+116    	; 0x580 <malloc+0x124>
 50c:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <__data_end>
 510:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <__data_end+0x1>
 514:	23 2b       	or	r18, r19
 516:	41 f4       	brne	.+16     	; 0x528 <malloc+0xcc>
 518:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 51c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 520:	30 93 d9 01 	sts	0x01D9, r19	; 0x8001d9 <__data_end+0x1>
 524:	20 93 d8 01 	sts	0x01D8, r18	; 0x8001d8 <__data_end>
 528:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 52c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 530:	21 15       	cp	r18, r1
 532:	31 05       	cpc	r19, r1
 534:	41 f4       	brne	.+16     	; 0x546 <malloc+0xea>
 536:	2d b7       	in	r18, 0x3d	; 61
 538:	3e b7       	in	r19, 0x3e	; 62
 53a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 53e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 542:	24 1b       	sub	r18, r20
 544:	35 0b       	sbc	r19, r21
 546:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <__data_end>
 54a:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <__data_end+0x1>
 54e:	e2 17       	cp	r30, r18
 550:	f3 07       	cpc	r31, r19
 552:	a0 f4       	brcc	.+40     	; 0x57c <malloc+0x120>
 554:	2e 1b       	sub	r18, r30
 556:	3f 0b       	sbc	r19, r31
 558:	28 17       	cp	r18, r24
 55a:	39 07       	cpc	r19, r25
 55c:	78 f0       	brcs	.+30     	; 0x57c <malloc+0x120>
 55e:	ac 01       	movw	r20, r24
 560:	4e 5f       	subi	r20, 0xFE	; 254
 562:	5f 4f       	sbci	r21, 0xFF	; 255
 564:	24 17       	cp	r18, r20
 566:	35 07       	cpc	r19, r21
 568:	48 f0       	brcs	.+18     	; 0x57c <malloc+0x120>
 56a:	4e 0f       	add	r20, r30
 56c:	5f 1f       	adc	r21, r31
 56e:	50 93 d9 01 	sts	0x01D9, r21	; 0x8001d9 <__data_end+0x1>
 572:	40 93 d8 01 	sts	0x01D8, r20	; 0x8001d8 <__data_end>
 576:	81 93       	st	Z+, r24
 578:	91 93       	st	Z+, r25
 57a:	02 c0       	rjmp	.+4      	; 0x580 <malloc+0x124>
 57c:	e0 e0       	ldi	r30, 0x00	; 0
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	cf 01       	movw	r24, r30
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	1f 91       	pop	r17
 588:	0f 91       	pop	r16
 58a:	08 95       	ret

0000058c <free>:
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	00 97       	sbiw	r24, 0x00	; 0
 592:	09 f4       	brne	.+2      	; 0x596 <free+0xa>
 594:	81 c0       	rjmp	.+258    	; 0x698 <free+0x10c>
 596:	fc 01       	movw	r30, r24
 598:	32 97       	sbiw	r30, 0x02	; 2
 59a:	13 82       	std	Z+3, r1	; 0x03
 59c:	12 82       	std	Z+2, r1	; 0x02
 59e:	a0 91 da 01 	lds	r26, 0x01DA	; 0x8001da <__flp>
 5a2:	b0 91 db 01 	lds	r27, 0x01DB	; 0x8001db <__flp+0x1>
 5a6:	10 97       	sbiw	r26, 0x00	; 0
 5a8:	81 f4       	brne	.+32     	; 0x5ca <free+0x3e>
 5aa:	20 81       	ld	r18, Z
 5ac:	31 81       	ldd	r19, Z+1	; 0x01
 5ae:	82 0f       	add	r24, r18
 5b0:	93 1f       	adc	r25, r19
 5b2:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <__data_end>
 5b6:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <__data_end+0x1>
 5ba:	28 17       	cp	r18, r24
 5bc:	39 07       	cpc	r19, r25
 5be:	51 f5       	brne	.+84     	; 0x614 <free+0x88>
 5c0:	f0 93 d9 01 	sts	0x01D9, r31	; 0x8001d9 <__data_end+0x1>
 5c4:	e0 93 d8 01 	sts	0x01D8, r30	; 0x8001d8 <__data_end>
 5c8:	67 c0       	rjmp	.+206    	; 0x698 <free+0x10c>
 5ca:	ed 01       	movw	r28, r26
 5cc:	20 e0       	ldi	r18, 0x00	; 0
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	ce 17       	cp	r28, r30
 5d2:	df 07       	cpc	r29, r31
 5d4:	40 f4       	brcc	.+16     	; 0x5e6 <free+0x5a>
 5d6:	4a 81       	ldd	r20, Y+2	; 0x02
 5d8:	5b 81       	ldd	r21, Y+3	; 0x03
 5da:	9e 01       	movw	r18, r28
 5dc:	41 15       	cp	r20, r1
 5de:	51 05       	cpc	r21, r1
 5e0:	f1 f0       	breq	.+60     	; 0x61e <free+0x92>
 5e2:	ea 01       	movw	r28, r20
 5e4:	f5 cf       	rjmp	.-22     	; 0x5d0 <free+0x44>
 5e6:	d3 83       	std	Z+3, r29	; 0x03
 5e8:	c2 83       	std	Z+2, r28	; 0x02
 5ea:	40 81       	ld	r20, Z
 5ec:	51 81       	ldd	r21, Z+1	; 0x01
 5ee:	84 0f       	add	r24, r20
 5f0:	95 1f       	adc	r25, r21
 5f2:	c8 17       	cp	r28, r24
 5f4:	d9 07       	cpc	r29, r25
 5f6:	59 f4       	brne	.+22     	; 0x60e <free+0x82>
 5f8:	88 81       	ld	r24, Y
 5fa:	99 81       	ldd	r25, Y+1	; 0x01
 5fc:	84 0f       	add	r24, r20
 5fe:	95 1f       	adc	r25, r21
 600:	02 96       	adiw	r24, 0x02	; 2
 602:	91 83       	std	Z+1, r25	; 0x01
 604:	80 83       	st	Z, r24
 606:	8a 81       	ldd	r24, Y+2	; 0x02
 608:	9b 81       	ldd	r25, Y+3	; 0x03
 60a:	93 83       	std	Z+3, r25	; 0x03
 60c:	82 83       	std	Z+2, r24	; 0x02
 60e:	21 15       	cp	r18, r1
 610:	31 05       	cpc	r19, r1
 612:	29 f4       	brne	.+10     	; 0x61e <free+0x92>
 614:	f0 93 db 01 	sts	0x01DB, r31	; 0x8001db <__flp+0x1>
 618:	e0 93 da 01 	sts	0x01DA, r30	; 0x8001da <__flp>
 61c:	3d c0       	rjmp	.+122    	; 0x698 <free+0x10c>
 61e:	e9 01       	movw	r28, r18
 620:	fb 83       	std	Y+3, r31	; 0x03
 622:	ea 83       	std	Y+2, r30	; 0x02
 624:	49 91       	ld	r20, Y+
 626:	59 91       	ld	r21, Y+
 628:	c4 0f       	add	r28, r20
 62a:	d5 1f       	adc	r29, r21
 62c:	ec 17       	cp	r30, r28
 62e:	fd 07       	cpc	r31, r29
 630:	61 f4       	brne	.+24     	; 0x64a <free+0xbe>
 632:	80 81       	ld	r24, Z
 634:	91 81       	ldd	r25, Z+1	; 0x01
 636:	84 0f       	add	r24, r20
 638:	95 1f       	adc	r25, r21
 63a:	02 96       	adiw	r24, 0x02	; 2
 63c:	e9 01       	movw	r28, r18
 63e:	99 83       	std	Y+1, r25	; 0x01
 640:	88 83       	st	Y, r24
 642:	82 81       	ldd	r24, Z+2	; 0x02
 644:	93 81       	ldd	r25, Z+3	; 0x03
 646:	9b 83       	std	Y+3, r25	; 0x03
 648:	8a 83       	std	Y+2, r24	; 0x02
 64a:	e0 e0       	ldi	r30, 0x00	; 0
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	12 96       	adiw	r26, 0x02	; 2
 650:	8d 91       	ld	r24, X+
 652:	9c 91       	ld	r25, X
 654:	13 97       	sbiw	r26, 0x03	; 3
 656:	00 97       	sbiw	r24, 0x00	; 0
 658:	19 f0       	breq	.+6      	; 0x660 <free+0xd4>
 65a:	fd 01       	movw	r30, r26
 65c:	dc 01       	movw	r26, r24
 65e:	f7 cf       	rjmp	.-18     	; 0x64e <free+0xc2>
 660:	8d 91       	ld	r24, X+
 662:	9c 91       	ld	r25, X
 664:	11 97       	sbiw	r26, 0x01	; 1
 666:	9d 01       	movw	r18, r26
 668:	2e 5f       	subi	r18, 0xFE	; 254
 66a:	3f 4f       	sbci	r19, 0xFF	; 255
 66c:	82 0f       	add	r24, r18
 66e:	93 1f       	adc	r25, r19
 670:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <__data_end>
 674:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <__data_end+0x1>
 678:	28 17       	cp	r18, r24
 67a:	39 07       	cpc	r19, r25
 67c:	69 f4       	brne	.+26     	; 0x698 <free+0x10c>
 67e:	30 97       	sbiw	r30, 0x00	; 0
 680:	29 f4       	brne	.+10     	; 0x68c <free+0x100>
 682:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <__flp+0x1>
 686:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__flp>
 68a:	02 c0       	rjmp	.+4      	; 0x690 <free+0x104>
 68c:	13 82       	std	Z+3, r1	; 0x03
 68e:	12 82       	std	Z+2, r1	; 0x02
 690:	b0 93 d9 01 	sts	0x01D9, r27	; 0x8001d9 <__data_end+0x1>
 694:	a0 93 d8 01 	sts	0x01D8, r26	; 0x8001d8 <__data_end>
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	08 95       	ret

0000069e <sprintf>:
 69e:	ae e0       	ldi	r26, 0x0E	; 14
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	e5 e5       	ldi	r30, 0x55	; 85
 6a4:	f3 e0       	ldi	r31, 0x03	; 3
 6a6:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__prologue_saves__+0x1c>
 6aa:	0d 89       	ldd	r16, Y+21	; 0x15
 6ac:	1e 89       	ldd	r17, Y+22	; 0x16
 6ae:	86 e0       	ldi	r24, 0x06	; 6
 6b0:	8c 83       	std	Y+4, r24	; 0x04
 6b2:	1a 83       	std	Y+2, r17	; 0x02
 6b4:	09 83       	std	Y+1, r16	; 0x01
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	9f e7       	ldi	r25, 0x7F	; 127
 6ba:	9e 83       	std	Y+6, r25	; 0x06
 6bc:	8d 83       	std	Y+5, r24	; 0x05
 6be:	ae 01       	movw	r20, r28
 6c0:	47 5e       	subi	r20, 0xE7	; 231
 6c2:	5f 4f       	sbci	r21, 0xFF	; 255
 6c4:	6f 89       	ldd	r22, Y+23	; 0x17
 6c6:	78 8d       	ldd	r23, Y+24	; 0x18
 6c8:	ce 01       	movw	r24, r28
 6ca:	01 96       	adiw	r24, 0x01	; 1
 6cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vfprintf>
 6d0:	ef 81       	ldd	r30, Y+7	; 0x07
 6d2:	f8 85       	ldd	r31, Y+8	; 0x08
 6d4:	e0 0f       	add	r30, r16
 6d6:	f1 1f       	adc	r31, r17
 6d8:	10 82       	st	Z, r1
 6da:	2e 96       	adiw	r28, 0x0e	; 14
 6dc:	e4 e0       	ldi	r30, 0x04	; 4
 6de:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__epilogue_restores__+0x1c>

000006e2 <vfprintf>:
 6e2:	ab e0       	ldi	r26, 0x0B	; 11
 6e4:	b0 e0       	ldi	r27, 0x00	; 0
 6e6:	e7 e7       	ldi	r30, 0x77	; 119
 6e8:	f3 e0       	ldi	r31, 0x03	; 3
 6ea:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__prologue_saves__>
 6ee:	6c 01       	movw	r12, r24
 6f0:	7b 01       	movw	r14, r22
 6f2:	8a 01       	movw	r16, r20
 6f4:	fc 01       	movw	r30, r24
 6f6:	17 82       	std	Z+7, r1	; 0x07
 6f8:	16 82       	std	Z+6, r1	; 0x06
 6fa:	83 81       	ldd	r24, Z+3	; 0x03
 6fc:	81 ff       	sbrs	r24, 1
 6fe:	cc c1       	rjmp	.+920    	; 0xa98 <__stack+0x199>
 700:	ce 01       	movw	r24, r28
 702:	01 96       	adiw	r24, 0x01	; 1
 704:	3c 01       	movw	r6, r24
 706:	f6 01       	movw	r30, r12
 708:	93 81       	ldd	r25, Z+3	; 0x03
 70a:	f7 01       	movw	r30, r14
 70c:	93 fd       	sbrc	r25, 3
 70e:	85 91       	lpm	r24, Z+
 710:	93 ff       	sbrs	r25, 3
 712:	81 91       	ld	r24, Z+
 714:	7f 01       	movw	r14, r30
 716:	88 23       	and	r24, r24
 718:	09 f4       	brne	.+2      	; 0x71c <vfprintf+0x3a>
 71a:	ba c1       	rjmp	.+884    	; 0xa90 <__stack+0x191>
 71c:	85 32       	cpi	r24, 0x25	; 37
 71e:	39 f4       	brne	.+14     	; 0x72e <vfprintf+0x4c>
 720:	93 fd       	sbrc	r25, 3
 722:	85 91       	lpm	r24, Z+
 724:	93 ff       	sbrs	r25, 3
 726:	81 91       	ld	r24, Z+
 728:	7f 01       	movw	r14, r30
 72a:	85 32       	cpi	r24, 0x25	; 37
 72c:	29 f4       	brne	.+10     	; 0x738 <vfprintf+0x56>
 72e:	b6 01       	movw	r22, r12
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 736:	e7 cf       	rjmp	.-50     	; 0x706 <vfprintf+0x24>
 738:	91 2c       	mov	r9, r1
 73a:	21 2c       	mov	r2, r1
 73c:	31 2c       	mov	r3, r1
 73e:	ff e1       	ldi	r31, 0x1F	; 31
 740:	f3 15       	cp	r31, r3
 742:	d8 f0       	brcs	.+54     	; 0x77a <vfprintf+0x98>
 744:	8b 32       	cpi	r24, 0x2B	; 43
 746:	79 f0       	breq	.+30     	; 0x766 <vfprintf+0x84>
 748:	38 f4       	brcc	.+14     	; 0x758 <vfprintf+0x76>
 74a:	80 32       	cpi	r24, 0x20	; 32
 74c:	79 f0       	breq	.+30     	; 0x76c <vfprintf+0x8a>
 74e:	83 32       	cpi	r24, 0x23	; 35
 750:	a1 f4       	brne	.+40     	; 0x77a <vfprintf+0x98>
 752:	23 2d       	mov	r18, r3
 754:	20 61       	ori	r18, 0x10	; 16
 756:	1d c0       	rjmp	.+58     	; 0x792 <vfprintf+0xb0>
 758:	8d 32       	cpi	r24, 0x2D	; 45
 75a:	61 f0       	breq	.+24     	; 0x774 <vfprintf+0x92>
 75c:	80 33       	cpi	r24, 0x30	; 48
 75e:	69 f4       	brne	.+26     	; 0x77a <vfprintf+0x98>
 760:	23 2d       	mov	r18, r3
 762:	21 60       	ori	r18, 0x01	; 1
 764:	16 c0       	rjmp	.+44     	; 0x792 <vfprintf+0xb0>
 766:	83 2d       	mov	r24, r3
 768:	82 60       	ori	r24, 0x02	; 2
 76a:	38 2e       	mov	r3, r24
 76c:	e3 2d       	mov	r30, r3
 76e:	e4 60       	ori	r30, 0x04	; 4
 770:	3e 2e       	mov	r3, r30
 772:	2a c0       	rjmp	.+84     	; 0x7c8 <vfprintf+0xe6>
 774:	f3 2d       	mov	r31, r3
 776:	f8 60       	ori	r31, 0x08	; 8
 778:	1d c0       	rjmp	.+58     	; 0x7b4 <vfprintf+0xd2>
 77a:	37 fc       	sbrc	r3, 7
 77c:	2d c0       	rjmp	.+90     	; 0x7d8 <vfprintf+0xf6>
 77e:	20 ed       	ldi	r18, 0xD0	; 208
 780:	28 0f       	add	r18, r24
 782:	2a 30       	cpi	r18, 0x0A	; 10
 784:	40 f0       	brcs	.+16     	; 0x796 <vfprintf+0xb4>
 786:	8e 32       	cpi	r24, 0x2E	; 46
 788:	b9 f4       	brne	.+46     	; 0x7b8 <vfprintf+0xd6>
 78a:	36 fc       	sbrc	r3, 6
 78c:	81 c1       	rjmp	.+770    	; 0xa90 <__stack+0x191>
 78e:	23 2d       	mov	r18, r3
 790:	20 64       	ori	r18, 0x40	; 64
 792:	32 2e       	mov	r3, r18
 794:	19 c0       	rjmp	.+50     	; 0x7c8 <vfprintf+0xe6>
 796:	36 fe       	sbrs	r3, 6
 798:	06 c0       	rjmp	.+12     	; 0x7a6 <vfprintf+0xc4>
 79a:	8a e0       	ldi	r24, 0x0A	; 10
 79c:	98 9e       	mul	r9, r24
 79e:	20 0d       	add	r18, r0
 7a0:	11 24       	eor	r1, r1
 7a2:	92 2e       	mov	r9, r18
 7a4:	11 c0       	rjmp	.+34     	; 0x7c8 <vfprintf+0xe6>
 7a6:	ea e0       	ldi	r30, 0x0A	; 10
 7a8:	2e 9e       	mul	r2, r30
 7aa:	20 0d       	add	r18, r0
 7ac:	11 24       	eor	r1, r1
 7ae:	22 2e       	mov	r2, r18
 7b0:	f3 2d       	mov	r31, r3
 7b2:	f0 62       	ori	r31, 0x20	; 32
 7b4:	3f 2e       	mov	r3, r31
 7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <vfprintf+0xe6>
 7b8:	8c 36       	cpi	r24, 0x6C	; 108
 7ba:	21 f4       	brne	.+8      	; 0x7c4 <vfprintf+0xe2>
 7bc:	83 2d       	mov	r24, r3
 7be:	80 68       	ori	r24, 0x80	; 128
 7c0:	38 2e       	mov	r3, r24
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <vfprintf+0xe6>
 7c4:	88 36       	cpi	r24, 0x68	; 104
 7c6:	41 f4       	brne	.+16     	; 0x7d8 <vfprintf+0xf6>
 7c8:	f7 01       	movw	r30, r14
 7ca:	93 fd       	sbrc	r25, 3
 7cc:	85 91       	lpm	r24, Z+
 7ce:	93 ff       	sbrs	r25, 3
 7d0:	81 91       	ld	r24, Z+
 7d2:	7f 01       	movw	r14, r30
 7d4:	81 11       	cpse	r24, r1
 7d6:	b3 cf       	rjmp	.-154    	; 0x73e <vfprintf+0x5c>
 7d8:	98 2f       	mov	r25, r24
 7da:	9f 7d       	andi	r25, 0xDF	; 223
 7dc:	95 54       	subi	r25, 0x45	; 69
 7de:	93 30       	cpi	r25, 0x03	; 3
 7e0:	28 f4       	brcc	.+10     	; 0x7ec <vfprintf+0x10a>
 7e2:	0c 5f       	subi	r16, 0xFC	; 252
 7e4:	1f 4f       	sbci	r17, 0xFF	; 255
 7e6:	9f e3       	ldi	r25, 0x3F	; 63
 7e8:	99 83       	std	Y+1, r25	; 0x01
 7ea:	0d c0       	rjmp	.+26     	; 0x806 <vfprintf+0x124>
 7ec:	83 36       	cpi	r24, 0x63	; 99
 7ee:	31 f0       	breq	.+12     	; 0x7fc <vfprintf+0x11a>
 7f0:	83 37       	cpi	r24, 0x73	; 115
 7f2:	71 f0       	breq	.+28     	; 0x810 <vfprintf+0x12e>
 7f4:	83 35       	cpi	r24, 0x53	; 83
 7f6:	09 f0       	breq	.+2      	; 0x7fa <vfprintf+0x118>
 7f8:	59 c0       	rjmp	.+178    	; 0x8ac <vfprintf+0x1ca>
 7fa:	21 c0       	rjmp	.+66     	; 0x83e <vfprintf+0x15c>
 7fc:	f8 01       	movw	r30, r16
 7fe:	80 81       	ld	r24, Z
 800:	89 83       	std	Y+1, r24	; 0x01
 802:	0e 5f       	subi	r16, 0xFE	; 254
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	88 24       	eor	r8, r8
 808:	83 94       	inc	r8
 80a:	91 2c       	mov	r9, r1
 80c:	53 01       	movw	r10, r6
 80e:	13 c0       	rjmp	.+38     	; 0x836 <vfprintf+0x154>
 810:	28 01       	movw	r4, r16
 812:	f2 e0       	ldi	r31, 0x02	; 2
 814:	4f 0e       	add	r4, r31
 816:	51 1c       	adc	r5, r1
 818:	f8 01       	movw	r30, r16
 81a:	a0 80       	ld	r10, Z
 81c:	b1 80       	ldd	r11, Z+1	; 0x01
 81e:	36 fe       	sbrs	r3, 6
 820:	03 c0       	rjmp	.+6      	; 0x828 <vfprintf+0x146>
 822:	69 2d       	mov	r22, r9
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	02 c0       	rjmp	.+4      	; 0x82c <vfprintf+0x14a>
 828:	6f ef       	ldi	r22, 0xFF	; 255
 82a:	7f ef       	ldi	r23, 0xFF	; 255
 82c:	c5 01       	movw	r24, r10
 82e:	0e 94 5d 05 	call	0xaba	; 0xaba <strnlen>
 832:	4c 01       	movw	r8, r24
 834:	82 01       	movw	r16, r4
 836:	f3 2d       	mov	r31, r3
 838:	ff 77       	andi	r31, 0x7F	; 127
 83a:	3f 2e       	mov	r3, r31
 83c:	16 c0       	rjmp	.+44     	; 0x86a <vfprintf+0x188>
 83e:	28 01       	movw	r4, r16
 840:	22 e0       	ldi	r18, 0x02	; 2
 842:	42 0e       	add	r4, r18
 844:	51 1c       	adc	r5, r1
 846:	f8 01       	movw	r30, r16
 848:	a0 80       	ld	r10, Z
 84a:	b1 80       	ldd	r11, Z+1	; 0x01
 84c:	36 fe       	sbrs	r3, 6
 84e:	03 c0       	rjmp	.+6      	; 0x856 <vfprintf+0x174>
 850:	69 2d       	mov	r22, r9
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	02 c0       	rjmp	.+4      	; 0x85a <vfprintf+0x178>
 856:	6f ef       	ldi	r22, 0xFF	; 255
 858:	7f ef       	ldi	r23, 0xFF	; 255
 85a:	c5 01       	movw	r24, r10
 85c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <strnlen_P>
 860:	4c 01       	movw	r8, r24
 862:	f3 2d       	mov	r31, r3
 864:	f0 68       	ori	r31, 0x80	; 128
 866:	3f 2e       	mov	r3, r31
 868:	82 01       	movw	r16, r4
 86a:	33 fc       	sbrc	r3, 3
 86c:	1b c0       	rjmp	.+54     	; 0x8a4 <vfprintf+0x1c2>
 86e:	82 2d       	mov	r24, r2
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	88 16       	cp	r8, r24
 874:	99 06       	cpc	r9, r25
 876:	b0 f4       	brcc	.+44     	; 0x8a4 <vfprintf+0x1c2>
 878:	b6 01       	movw	r22, r12
 87a:	80 e2       	ldi	r24, 0x20	; 32
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 882:	2a 94       	dec	r2
 884:	f4 cf       	rjmp	.-24     	; 0x86e <vfprintf+0x18c>
 886:	f5 01       	movw	r30, r10
 888:	37 fc       	sbrc	r3, 7
 88a:	85 91       	lpm	r24, Z+
 88c:	37 fe       	sbrs	r3, 7
 88e:	81 91       	ld	r24, Z+
 890:	5f 01       	movw	r10, r30
 892:	b6 01       	movw	r22, r12
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 89a:	21 10       	cpse	r2, r1
 89c:	2a 94       	dec	r2
 89e:	21 e0       	ldi	r18, 0x01	; 1
 8a0:	82 1a       	sub	r8, r18
 8a2:	91 08       	sbc	r9, r1
 8a4:	81 14       	cp	r8, r1
 8a6:	91 04       	cpc	r9, r1
 8a8:	71 f7       	brne	.-36     	; 0x886 <vfprintf+0x1a4>
 8aa:	e8 c0       	rjmp	.+464    	; 0xa7c <__stack+0x17d>
 8ac:	84 36       	cpi	r24, 0x64	; 100
 8ae:	11 f0       	breq	.+4      	; 0x8b4 <vfprintf+0x1d2>
 8b0:	89 36       	cpi	r24, 0x69	; 105
 8b2:	41 f5       	brne	.+80     	; 0x904 <__stack+0x5>
 8b4:	f8 01       	movw	r30, r16
 8b6:	37 fe       	sbrs	r3, 7
 8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <vfprintf+0x1e6>
 8ba:	60 81       	ld	r22, Z
 8bc:	71 81       	ldd	r23, Z+1	; 0x01
 8be:	82 81       	ldd	r24, Z+2	; 0x02
 8c0:	93 81       	ldd	r25, Z+3	; 0x03
 8c2:	0c 5f       	subi	r16, 0xFC	; 252
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <vfprintf+0x1f6>
 8c8:	60 81       	ld	r22, Z
 8ca:	71 81       	ldd	r23, Z+1	; 0x01
 8cc:	07 2e       	mov	r0, r23
 8ce:	00 0c       	add	r0, r0
 8d0:	88 0b       	sbc	r24, r24
 8d2:	99 0b       	sbc	r25, r25
 8d4:	0e 5f       	subi	r16, 0xFE	; 254
 8d6:	1f 4f       	sbci	r17, 0xFF	; 255
 8d8:	f3 2d       	mov	r31, r3
 8da:	ff 76       	andi	r31, 0x6F	; 111
 8dc:	3f 2e       	mov	r3, r31
 8de:	97 ff       	sbrs	r25, 7
 8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <vfprintf+0x212>
 8e2:	90 95       	com	r25
 8e4:	80 95       	com	r24
 8e6:	70 95       	com	r23
 8e8:	61 95       	neg	r22
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	f0 68       	ori	r31, 0x80	; 128
 8f2:	3f 2e       	mov	r3, r31
 8f4:	2a e0       	ldi	r18, 0x0A	; 10
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	a3 01       	movw	r20, r6
 8fa:	0e 94 a4 05 	call	0xb48	; 0xb48 <__ultoa_invert>
 8fe:	88 2e       	mov	r8, r24
 900:	86 18       	sub	r8, r6
 902:	45 c0       	rjmp	.+138    	; 0x98e <__stack+0x8f>
 904:	85 37       	cpi	r24, 0x75	; 117
 906:	31 f4       	brne	.+12     	; 0x914 <__stack+0x15>
 908:	23 2d       	mov	r18, r3
 90a:	2f 7e       	andi	r18, 0xEF	; 239
 90c:	b2 2e       	mov	r11, r18
 90e:	2a e0       	ldi	r18, 0x0A	; 10
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	25 c0       	rjmp	.+74     	; 0x95e <__stack+0x5f>
 914:	93 2d       	mov	r25, r3
 916:	99 7f       	andi	r25, 0xF9	; 249
 918:	b9 2e       	mov	r11, r25
 91a:	8f 36       	cpi	r24, 0x6F	; 111
 91c:	c1 f0       	breq	.+48     	; 0x94e <__stack+0x4f>
 91e:	18 f4       	brcc	.+6      	; 0x926 <__stack+0x27>
 920:	88 35       	cpi	r24, 0x58	; 88
 922:	79 f0       	breq	.+30     	; 0x942 <__stack+0x43>
 924:	b5 c0       	rjmp	.+362    	; 0xa90 <__stack+0x191>
 926:	80 37       	cpi	r24, 0x70	; 112
 928:	19 f0       	breq	.+6      	; 0x930 <__stack+0x31>
 92a:	88 37       	cpi	r24, 0x78	; 120
 92c:	21 f0       	breq	.+8      	; 0x936 <__stack+0x37>
 92e:	b0 c0       	rjmp	.+352    	; 0xa90 <__stack+0x191>
 930:	e9 2f       	mov	r30, r25
 932:	e0 61       	ori	r30, 0x10	; 16
 934:	be 2e       	mov	r11, r30
 936:	b4 fe       	sbrs	r11, 4
 938:	0d c0       	rjmp	.+26     	; 0x954 <__stack+0x55>
 93a:	fb 2d       	mov	r31, r11
 93c:	f4 60       	ori	r31, 0x04	; 4
 93e:	bf 2e       	mov	r11, r31
 940:	09 c0       	rjmp	.+18     	; 0x954 <__stack+0x55>
 942:	34 fe       	sbrs	r3, 4
 944:	0a c0       	rjmp	.+20     	; 0x95a <__stack+0x5b>
 946:	29 2f       	mov	r18, r25
 948:	26 60       	ori	r18, 0x06	; 6
 94a:	b2 2e       	mov	r11, r18
 94c:	06 c0       	rjmp	.+12     	; 0x95a <__stack+0x5b>
 94e:	28 e0       	ldi	r18, 0x08	; 8
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	05 c0       	rjmp	.+10     	; 0x95e <__stack+0x5f>
 954:	20 e1       	ldi	r18, 0x10	; 16
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0x5f>
 95a:	20 e1       	ldi	r18, 0x10	; 16
 95c:	32 e0       	ldi	r19, 0x02	; 2
 95e:	f8 01       	movw	r30, r16
 960:	b7 fe       	sbrs	r11, 7
 962:	07 c0       	rjmp	.+14     	; 0x972 <__stack+0x73>
 964:	60 81       	ld	r22, Z
 966:	71 81       	ldd	r23, Z+1	; 0x01
 968:	82 81       	ldd	r24, Z+2	; 0x02
 96a:	93 81       	ldd	r25, Z+3	; 0x03
 96c:	0c 5f       	subi	r16, 0xFC	; 252
 96e:	1f 4f       	sbci	r17, 0xFF	; 255
 970:	06 c0       	rjmp	.+12     	; 0x97e <__stack+0x7f>
 972:	60 81       	ld	r22, Z
 974:	71 81       	ldd	r23, Z+1	; 0x01
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 5f       	subi	r16, 0xFE	; 254
 97c:	1f 4f       	sbci	r17, 0xFF	; 255
 97e:	a3 01       	movw	r20, r6
 980:	0e 94 a4 05 	call	0xb48	; 0xb48 <__ultoa_invert>
 984:	88 2e       	mov	r8, r24
 986:	86 18       	sub	r8, r6
 988:	fb 2d       	mov	r31, r11
 98a:	ff 77       	andi	r31, 0x7F	; 127
 98c:	3f 2e       	mov	r3, r31
 98e:	36 fe       	sbrs	r3, 6
 990:	0d c0       	rjmp	.+26     	; 0x9ac <__stack+0xad>
 992:	23 2d       	mov	r18, r3
 994:	2e 7f       	andi	r18, 0xFE	; 254
 996:	a2 2e       	mov	r10, r18
 998:	89 14       	cp	r8, r9
 99a:	58 f4       	brcc	.+22     	; 0x9b2 <__stack+0xb3>
 99c:	34 fe       	sbrs	r3, 4
 99e:	0b c0       	rjmp	.+22     	; 0x9b6 <__stack+0xb7>
 9a0:	32 fc       	sbrc	r3, 2
 9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <__stack+0xb7>
 9a4:	83 2d       	mov	r24, r3
 9a6:	8e 7e       	andi	r24, 0xEE	; 238
 9a8:	a8 2e       	mov	r10, r24
 9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <__stack+0xb7>
 9ac:	b8 2c       	mov	r11, r8
 9ae:	a3 2c       	mov	r10, r3
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <__stack+0xb9>
 9b2:	b8 2c       	mov	r11, r8
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <__stack+0xb9>
 9b6:	b9 2c       	mov	r11, r9
 9b8:	a4 fe       	sbrs	r10, 4
 9ba:	0f c0       	rjmp	.+30     	; 0x9da <__stack+0xdb>
 9bc:	fe 01       	movw	r30, r28
 9be:	e8 0d       	add	r30, r8
 9c0:	f1 1d       	adc	r31, r1
 9c2:	80 81       	ld	r24, Z
 9c4:	80 33       	cpi	r24, 0x30	; 48
 9c6:	21 f4       	brne	.+8      	; 0x9d0 <__stack+0xd1>
 9c8:	9a 2d       	mov	r25, r10
 9ca:	99 7e       	andi	r25, 0xE9	; 233
 9cc:	a9 2e       	mov	r10, r25
 9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <__stack+0xe3>
 9d0:	a2 fe       	sbrs	r10, 2
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <__stack+0xe1>
 9d4:	b3 94       	inc	r11
 9d6:	b3 94       	inc	r11
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__stack+0xe3>
 9da:	8a 2d       	mov	r24, r10
 9dc:	86 78       	andi	r24, 0x86	; 134
 9de:	09 f0       	breq	.+2      	; 0x9e2 <__stack+0xe3>
 9e0:	b3 94       	inc	r11
 9e2:	a3 fc       	sbrc	r10, 3
 9e4:	11 c0       	rjmp	.+34     	; 0xa08 <__stack+0x109>
 9e6:	a0 fe       	sbrs	r10, 0
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <__stack+0xf7>
 9ea:	b2 14       	cp	r11, r2
 9ec:	88 f4       	brcc	.+34     	; 0xa10 <__stack+0x111>
 9ee:	28 0c       	add	r2, r8
 9f0:	92 2c       	mov	r9, r2
 9f2:	9b 18       	sub	r9, r11
 9f4:	0e c0       	rjmp	.+28     	; 0xa12 <__stack+0x113>
 9f6:	b2 14       	cp	r11, r2
 9f8:	60 f4       	brcc	.+24     	; 0xa12 <__stack+0x113>
 9fa:	b6 01       	movw	r22, r12
 9fc:	80 e2       	ldi	r24, 0x20	; 32
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a04:	b3 94       	inc	r11
 a06:	f7 cf       	rjmp	.-18     	; 0x9f6 <__stack+0xf7>
 a08:	b2 14       	cp	r11, r2
 a0a:	18 f4       	brcc	.+6      	; 0xa12 <__stack+0x113>
 a0c:	2b 18       	sub	r2, r11
 a0e:	02 c0       	rjmp	.+4      	; 0xa14 <__stack+0x115>
 a10:	98 2c       	mov	r9, r8
 a12:	21 2c       	mov	r2, r1
 a14:	a4 fe       	sbrs	r10, 4
 a16:	10 c0       	rjmp	.+32     	; 0xa38 <__stack+0x139>
 a18:	b6 01       	movw	r22, r12
 a1a:	80 e3       	ldi	r24, 0x30	; 48
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a22:	a2 fe       	sbrs	r10, 2
 a24:	17 c0       	rjmp	.+46     	; 0xa54 <__stack+0x155>
 a26:	a1 fc       	sbrc	r10, 1
 a28:	03 c0       	rjmp	.+6      	; 0xa30 <__stack+0x131>
 a2a:	88 e7       	ldi	r24, 0x78	; 120
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <__stack+0x135>
 a30:	88 e5       	ldi	r24, 0x58	; 88
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	b6 01       	movw	r22, r12
 a36:	0c c0       	rjmp	.+24     	; 0xa50 <__stack+0x151>
 a38:	8a 2d       	mov	r24, r10
 a3a:	86 78       	andi	r24, 0x86	; 134
 a3c:	59 f0       	breq	.+22     	; 0xa54 <__stack+0x155>
 a3e:	a1 fe       	sbrs	r10, 1
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <__stack+0x147>
 a42:	8b e2       	ldi	r24, 0x2B	; 43
 a44:	01 c0       	rjmp	.+2      	; 0xa48 <__stack+0x149>
 a46:	80 e2       	ldi	r24, 0x20	; 32
 a48:	a7 fc       	sbrc	r10, 7
 a4a:	8d e2       	ldi	r24, 0x2D	; 45
 a4c:	b6 01       	movw	r22, r12
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a54:	89 14       	cp	r8, r9
 a56:	38 f4       	brcc	.+14     	; 0xa66 <__stack+0x167>
 a58:	b6 01       	movw	r22, r12
 a5a:	80 e3       	ldi	r24, 0x30	; 48
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a62:	9a 94       	dec	r9
 a64:	f7 cf       	rjmp	.-18     	; 0xa54 <__stack+0x155>
 a66:	8a 94       	dec	r8
 a68:	f3 01       	movw	r30, r6
 a6a:	e8 0d       	add	r30, r8
 a6c:	f1 1d       	adc	r31, r1
 a6e:	80 81       	ld	r24, Z
 a70:	b6 01       	movw	r22, r12
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a78:	81 10       	cpse	r8, r1
 a7a:	f5 cf       	rjmp	.-22     	; 0xa66 <__stack+0x167>
 a7c:	22 20       	and	r2, r2
 a7e:	09 f4       	brne	.+2      	; 0xa82 <__stack+0x183>
 a80:	42 ce       	rjmp	.-892    	; 0x706 <vfprintf+0x24>
 a82:	b6 01       	movw	r22, r12
 a84:	80 e2       	ldi	r24, 0x20	; 32
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a8c:	2a 94       	dec	r2
 a8e:	f6 cf       	rjmp	.-20     	; 0xa7c <__stack+0x17d>
 a90:	f6 01       	movw	r30, r12
 a92:	86 81       	ldd	r24, Z+6	; 0x06
 a94:	97 81       	ldd	r25, Z+7	; 0x07
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <__stack+0x19d>
 a98:	8f ef       	ldi	r24, 0xFF	; 255
 a9a:	9f ef       	ldi	r25, 0xFF	; 255
 a9c:	2b 96       	adiw	r28, 0x0b	; 11
 a9e:	e2 e1       	ldi	r30, 0x12	; 18
 aa0:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__epilogue_restores__>

00000aa4 <strnlen_P>:
 aa4:	fc 01       	movw	r30, r24
 aa6:	05 90       	lpm	r0, Z+
 aa8:	61 50       	subi	r22, 0x01	; 1
 aaa:	70 40       	sbci	r23, 0x00	; 0
 aac:	01 10       	cpse	r0, r1
 aae:	d8 f7       	brcc	.-10     	; 0xaa6 <strnlen_P+0x2>
 ab0:	80 95       	com	r24
 ab2:	90 95       	com	r25
 ab4:	8e 0f       	add	r24, r30
 ab6:	9f 1f       	adc	r25, r31
 ab8:	08 95       	ret

00000aba <strnlen>:
 aba:	fc 01       	movw	r30, r24
 abc:	61 50       	subi	r22, 0x01	; 1
 abe:	70 40       	sbci	r23, 0x00	; 0
 ac0:	01 90       	ld	r0, Z+
 ac2:	01 10       	cpse	r0, r1
 ac4:	d8 f7       	brcc	.-10     	; 0xabc <strnlen+0x2>
 ac6:	80 95       	com	r24
 ac8:	90 95       	com	r25
 aca:	8e 0f       	add	r24, r30
 acc:	9f 1f       	adc	r25, r31
 ace:	08 95       	ret

00000ad0 <fputc>:
 ad0:	0f 93       	push	r16
 ad2:	1f 93       	push	r17
 ad4:	cf 93       	push	r28
 ad6:	df 93       	push	r29
 ad8:	fb 01       	movw	r30, r22
 ada:	23 81       	ldd	r18, Z+3	; 0x03
 adc:	21 fd       	sbrc	r18, 1
 ade:	03 c0       	rjmp	.+6      	; 0xae6 <fputc+0x16>
 ae0:	8f ef       	ldi	r24, 0xFF	; 255
 ae2:	9f ef       	ldi	r25, 0xFF	; 255
 ae4:	2c c0       	rjmp	.+88     	; 0xb3e <fputc+0x6e>
 ae6:	22 ff       	sbrs	r18, 2
 ae8:	16 c0       	rjmp	.+44     	; 0xb16 <fputc+0x46>
 aea:	46 81       	ldd	r20, Z+6	; 0x06
 aec:	57 81       	ldd	r21, Z+7	; 0x07
 aee:	24 81       	ldd	r18, Z+4	; 0x04
 af0:	35 81       	ldd	r19, Z+5	; 0x05
 af2:	42 17       	cp	r20, r18
 af4:	53 07       	cpc	r21, r19
 af6:	44 f4       	brge	.+16     	; 0xb08 <fputc+0x38>
 af8:	a0 81       	ld	r26, Z
 afa:	b1 81       	ldd	r27, Z+1	; 0x01
 afc:	9d 01       	movw	r18, r26
 afe:	2f 5f       	subi	r18, 0xFF	; 255
 b00:	3f 4f       	sbci	r19, 0xFF	; 255
 b02:	31 83       	std	Z+1, r19	; 0x01
 b04:	20 83       	st	Z, r18
 b06:	8c 93       	st	X, r24
 b08:	26 81       	ldd	r18, Z+6	; 0x06
 b0a:	37 81       	ldd	r19, Z+7	; 0x07
 b0c:	2f 5f       	subi	r18, 0xFF	; 255
 b0e:	3f 4f       	sbci	r19, 0xFF	; 255
 b10:	37 83       	std	Z+7, r19	; 0x07
 b12:	26 83       	std	Z+6, r18	; 0x06
 b14:	14 c0       	rjmp	.+40     	; 0xb3e <fputc+0x6e>
 b16:	8b 01       	movw	r16, r22
 b18:	ec 01       	movw	r28, r24
 b1a:	fb 01       	movw	r30, r22
 b1c:	00 84       	ldd	r0, Z+8	; 0x08
 b1e:	f1 85       	ldd	r31, Z+9	; 0x09
 b20:	e0 2d       	mov	r30, r0
 b22:	09 95       	icall
 b24:	89 2b       	or	r24, r25
 b26:	e1 f6       	brne	.-72     	; 0xae0 <fputc+0x10>
 b28:	d8 01       	movw	r26, r16
 b2a:	16 96       	adiw	r26, 0x06	; 6
 b2c:	8d 91       	ld	r24, X+
 b2e:	9c 91       	ld	r25, X
 b30:	17 97       	sbiw	r26, 0x07	; 7
 b32:	01 96       	adiw	r24, 0x01	; 1
 b34:	17 96       	adiw	r26, 0x07	; 7
 b36:	9c 93       	st	X, r25
 b38:	8e 93       	st	-X, r24
 b3a:	16 97       	sbiw	r26, 0x06	; 6
 b3c:	ce 01       	movw	r24, r28
 b3e:	df 91       	pop	r29
 b40:	cf 91       	pop	r28
 b42:	1f 91       	pop	r17
 b44:	0f 91       	pop	r16
 b46:	08 95       	ret

00000b48 <__ultoa_invert>:
 b48:	fa 01       	movw	r30, r20
 b4a:	aa 27       	eor	r26, r26
 b4c:	28 30       	cpi	r18, 0x08	; 8
 b4e:	51 f1       	breq	.+84     	; 0xba4 <__ultoa_invert+0x5c>
 b50:	20 31       	cpi	r18, 0x10	; 16
 b52:	81 f1       	breq	.+96     	; 0xbb4 <__ultoa_invert+0x6c>
 b54:	e8 94       	clt
 b56:	6f 93       	push	r22
 b58:	6e 7f       	andi	r22, 0xFE	; 254
 b5a:	6e 5f       	subi	r22, 0xFE	; 254
 b5c:	7f 4f       	sbci	r23, 0xFF	; 255
 b5e:	8f 4f       	sbci	r24, 0xFF	; 255
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	af 4f       	sbci	r26, 0xFF	; 255
 b64:	b1 e0       	ldi	r27, 0x01	; 1
 b66:	3e d0       	rcall	.+124    	; 0xbe4 <__ultoa_invert+0x9c>
 b68:	b4 e0       	ldi	r27, 0x04	; 4
 b6a:	3c d0       	rcall	.+120    	; 0xbe4 <__ultoa_invert+0x9c>
 b6c:	67 0f       	add	r22, r23
 b6e:	78 1f       	adc	r23, r24
 b70:	89 1f       	adc	r24, r25
 b72:	9a 1f       	adc	r25, r26
 b74:	a1 1d       	adc	r26, r1
 b76:	68 0f       	add	r22, r24
 b78:	79 1f       	adc	r23, r25
 b7a:	8a 1f       	adc	r24, r26
 b7c:	91 1d       	adc	r25, r1
 b7e:	a1 1d       	adc	r26, r1
 b80:	6a 0f       	add	r22, r26
 b82:	71 1d       	adc	r23, r1
 b84:	81 1d       	adc	r24, r1
 b86:	91 1d       	adc	r25, r1
 b88:	a1 1d       	adc	r26, r1
 b8a:	20 d0       	rcall	.+64     	; 0xbcc <__ultoa_invert+0x84>
 b8c:	09 f4       	brne	.+2      	; 0xb90 <__ultoa_invert+0x48>
 b8e:	68 94       	set
 b90:	3f 91       	pop	r19
 b92:	2a e0       	ldi	r18, 0x0A	; 10
 b94:	26 9f       	mul	r18, r22
 b96:	11 24       	eor	r1, r1
 b98:	30 19       	sub	r19, r0
 b9a:	30 5d       	subi	r19, 0xD0	; 208
 b9c:	31 93       	st	Z+, r19
 b9e:	de f6       	brtc	.-74     	; 0xb56 <__ultoa_invert+0xe>
 ba0:	cf 01       	movw	r24, r30
 ba2:	08 95       	ret
 ba4:	46 2f       	mov	r20, r22
 ba6:	47 70       	andi	r20, 0x07	; 7
 ba8:	40 5d       	subi	r20, 0xD0	; 208
 baa:	41 93       	st	Z+, r20
 bac:	b3 e0       	ldi	r27, 0x03	; 3
 bae:	0f d0       	rcall	.+30     	; 0xbce <__ultoa_invert+0x86>
 bb0:	c9 f7       	brne	.-14     	; 0xba4 <__ultoa_invert+0x5c>
 bb2:	f6 cf       	rjmp	.-20     	; 0xba0 <__ultoa_invert+0x58>
 bb4:	46 2f       	mov	r20, r22
 bb6:	4f 70       	andi	r20, 0x0F	; 15
 bb8:	40 5d       	subi	r20, 0xD0	; 208
 bba:	4a 33       	cpi	r20, 0x3A	; 58
 bbc:	18 f0       	brcs	.+6      	; 0xbc4 <__ultoa_invert+0x7c>
 bbe:	49 5d       	subi	r20, 0xD9	; 217
 bc0:	31 fd       	sbrc	r19, 1
 bc2:	40 52       	subi	r20, 0x20	; 32
 bc4:	41 93       	st	Z+, r20
 bc6:	02 d0       	rcall	.+4      	; 0xbcc <__ultoa_invert+0x84>
 bc8:	a9 f7       	brne	.-22     	; 0xbb4 <__ultoa_invert+0x6c>
 bca:	ea cf       	rjmp	.-44     	; 0xba0 <__ultoa_invert+0x58>
 bcc:	b4 e0       	ldi	r27, 0x04	; 4
 bce:	a6 95       	lsr	r26
 bd0:	97 95       	ror	r25
 bd2:	87 95       	ror	r24
 bd4:	77 95       	ror	r23
 bd6:	67 95       	ror	r22
 bd8:	ba 95       	dec	r27
 bda:	c9 f7       	brne	.-14     	; 0xbce <__ultoa_invert+0x86>
 bdc:	00 97       	sbiw	r24, 0x00	; 0
 bde:	61 05       	cpc	r22, r1
 be0:	71 05       	cpc	r23, r1
 be2:	08 95       	ret
 be4:	9b 01       	movw	r18, r22
 be6:	ac 01       	movw	r20, r24
 be8:	0a 2e       	mov	r0, r26
 bea:	06 94       	lsr	r0
 bec:	57 95       	ror	r21
 bee:	47 95       	ror	r20
 bf0:	37 95       	ror	r19
 bf2:	27 95       	ror	r18
 bf4:	ba 95       	dec	r27
 bf6:	c9 f7       	brne	.-14     	; 0xbea <__ultoa_invert+0xa2>
 bf8:	62 0f       	add	r22, r18
 bfa:	73 1f       	adc	r23, r19
 bfc:	84 1f       	adc	r24, r20
 bfe:	95 1f       	adc	r25, r21
 c00:	a0 1d       	adc	r26, r0
 c02:	08 95       	ret

00000c04 <__prologue_saves__>:
 c04:	2f 92       	push	r2
 c06:	3f 92       	push	r3
 c08:	4f 92       	push	r4
 c0a:	5f 92       	push	r5
 c0c:	6f 92       	push	r6
 c0e:	7f 92       	push	r7
 c10:	8f 92       	push	r8
 c12:	9f 92       	push	r9
 c14:	af 92       	push	r10
 c16:	bf 92       	push	r11
 c18:	cf 92       	push	r12
 c1a:	df 92       	push	r13
 c1c:	ef 92       	push	r14
 c1e:	ff 92       	push	r15
 c20:	0f 93       	push	r16
 c22:	1f 93       	push	r17
 c24:	cf 93       	push	r28
 c26:	df 93       	push	r29
 c28:	cd b7       	in	r28, 0x3d	; 61
 c2a:	de b7       	in	r29, 0x3e	; 62
 c2c:	ca 1b       	sub	r28, r26
 c2e:	db 0b       	sbc	r29, r27
 c30:	0f b6       	in	r0, 0x3f	; 63
 c32:	f8 94       	cli
 c34:	de bf       	out	0x3e, r29	; 62
 c36:	0f be       	out	0x3f, r0	; 63
 c38:	cd bf       	out	0x3d, r28	; 61
 c3a:	09 94       	ijmp

00000c3c <__epilogue_restores__>:
 c3c:	2a 88       	ldd	r2, Y+18	; 0x12
 c3e:	39 88       	ldd	r3, Y+17	; 0x11
 c40:	48 88       	ldd	r4, Y+16	; 0x10
 c42:	5f 84       	ldd	r5, Y+15	; 0x0f
 c44:	6e 84       	ldd	r6, Y+14	; 0x0e
 c46:	7d 84       	ldd	r7, Y+13	; 0x0d
 c48:	8c 84       	ldd	r8, Y+12	; 0x0c
 c4a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c4c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c4e:	b9 84       	ldd	r11, Y+9	; 0x09
 c50:	c8 84       	ldd	r12, Y+8	; 0x08
 c52:	df 80       	ldd	r13, Y+7	; 0x07
 c54:	ee 80       	ldd	r14, Y+6	; 0x06
 c56:	fd 80       	ldd	r15, Y+5	; 0x05
 c58:	0c 81       	ldd	r16, Y+4	; 0x04
 c5a:	1b 81       	ldd	r17, Y+3	; 0x03
 c5c:	aa 81       	ldd	r26, Y+2	; 0x02
 c5e:	b9 81       	ldd	r27, Y+1	; 0x01
 c60:	ce 0f       	add	r28, r30
 c62:	d1 1d       	adc	r29, r1
 c64:	0f b6       	in	r0, 0x3f	; 63
 c66:	f8 94       	cli
 c68:	de bf       	out	0x3e, r29	; 62
 c6a:	0f be       	out	0x3f, r0	; 63
 c6c:	cd bf       	out	0x3d, r28	; 61
 c6e:	ed 01       	movw	r28, r26
 c70:	08 95       	ret

00000c72 <_exit>:
 c72:	f8 94       	cli

00000c74 <__stop_program>:
 c74:	ff cf       	rjmp	.-2      	; 0xc74 <__stop_program>
